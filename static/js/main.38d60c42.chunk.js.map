{"version":3,"sources":["components/habitAddForm.jsx","components/habit.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["HabitAddForm","PureComponent","memo","props","formRef","React","createRef","inputRef","ref","action","className","onSubmit","event","preventDefault","name","current","value","onAdd","reset","type","placeholder","Habits","handleIncrement","habit","onIncrement","handleDecrement","onDecrement","handleDelete","onDelete","handleAdd","console","log","this","habits","map","onClick","onReset","Component","Navbar","totalCount","App","state","id","count","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38d60c42.chunk.js","sourcesContent":["import React, { memo } from 'react';\n\nconst HabitAddForm = memo(props => { //props 를 받아서 리턴으로 내보내면 된다. \n    const formRef = React.createRef(); // formRef? \n    const inputRef = React.createRef(); //Ref dom 공식 사이트 리액트에서 다른요소에 접근하고 싶으면 ref를 쓴다   \n\n    const onSubmit = event =>{\n        event.preventDefault();//브라우저가 서브밋이 작동할때 리프레쉬를 하기때문에 브라우저의 디폴트 세팅을 막아줘야함\n        const name = inputRef.current.value; // inputRef의 value를 받아옴 \n        name && props.onAdd(name); // 이름이 있다면 props onAdd에 name을 전달 할 것 \n        formRef.current.reset();//초기화\n    };\n    \n    return (\n        <form ref={formRef} action=\"forRef\" className=\"add-form\" onSubmit={onSubmit}>\n            <input \n            ref = {inputRef}\n            type=\"text\" \n            className=\"add-input\" \n            placeholder=\"Habit\"\n        />\n            <button className=\"add-button\">Add</button>\n        </form>\n    );          \n});\n\nexport default HabitAddForm;","import React, { PureComponent } from 'react';\n\nclass Habit extends PureComponent {\n\n    handleIncrement = () =>{\n        this.props.onIncrement(this.props.habit);\n    };\n    handleDecrement = () =>{\n        this.props.onDecrement(this.props.habit);     \n\n        //this.setState({count: count < 0 ? 0:count});// count가 0 보다 작으면 0을 출력하고 아니면 count를 춣력 해라. \n    };\n    handleDelete = () =>{\n        this.props.onDelete(this.props.habit);\n    };\n\n    render() {\n        //console.log(this.props.habit); // 클래스 안의 props안에 habit이 들어 있음 개발자도구 component에서 확인이 가능\n        const { name, count } = this.props.habit; //const habitName = this.props.habit.name; \n        console.log(\"habit : \"+name);\n        return(\n            <li className=\"habit\">\n                <span className=\"habit-name\">{name}</span>\n                <span className=\"habit-count\">{count}</span>\n                <button \n                    className = \"habit-button habit-increase\" \n                    onClick={this.handleIncrement}\n                >\n                    <i className=\"fas fa-plus-square\"></i>\n                </button>\n                <button \n                    className = \"habit-button habit-decrease\"\n                    onClick={this.handleDecrement}\n                >\n                    <i className=\"fas fa-minus-square\"></i>\n                </button>\n                <button className = \"habit-button habit-delete\"\n                    onClick={this.handleDelete}\n                >\n                    <i className=\"fas fa-trash\"></i>\n                </button>\n            </li>\n        );\n    }\n}\n\nexport default Habit;","import React, { Component } from 'react';\nimport Habit from './habit';\nimport HabitAddForm from './habitAddForm';\n//HabitAddForm이라는 자식요소를 갖고 있음 \nclass Habits extends Component {\n\n    handleIncrement = habit =>{\n        this.props.onIncrement(habit);\n    };\n\n    handleDecrement = habit =>{\n        this.props.onDecrement(habit);   \n    };\n\n    handleDelete = habit =>{\n        this.props.onDelete(habit);\n    };\n    handleAdd = name => {\n        this.props.onAdd(name);\n    };\n//props에 전달된 habit을 이용해 전달함 \n    render() {// 자바스크립트 코드 사용 render는 상태에 맞게 ui 표기를 정의 \n        //컴포넌트로 기능들을 생성\n        console.log('habits');\n        return(\n            <>\n            <HabitAddForm onAdd={this.handleAdd}/>\n            <ul>\n                {this.props.habits.map(habit =>(//코드를 돌며 알맞는 habit을 받을 경우에 알맞는 jsx로 변환 해줌                  \n                    <Habit \n                    key={habit.id} \n                    habit={habit}\n                    onIncrement={this.props.onIncrement} \n                    onDecrement={this.props.onDecrement}  //Habit 에서 habit을 전달 (props)) Habit컴포넌트를 이용해 표기 \n                    onDelete = {this.props.onDelete}\n                    />\n                ))}\n            </ul>\n            <button className=\"habits-reset\" onClick={this.props.onReset}>  \n                    Reset All\n            </button>\n            </>\n        );\n    }\n}\n\nexport default Habits;","import React, { PureComponent } from 'react';\n//자식요소가 없는 순수 컴포넌트 \nclass Navbar extends PureComponent {\n    render() {\n        console.log('Navbar');\n        return (\n            <nav className = \"navbar\">\n                <i className=\"navbar-logo fab fa-apple\"></i>\n                <span>Habit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import './app.css';\nimport React, { Component } from 'react';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n\n  state={//statr 오브젝트 안에 habits 이라는 배열로 구성 //state의 전체 상태를 한번에 업데이트 해줘야 react가 인식함\n    habits:[\n        { id : 1, name: 'Reading', count: 0 }, //고유한 key 값을 주어주어야 한다. \n        { id : 2, name: 'Running', count: 0 },\n        { id : 3, name: 'Coding', count: 0 },\n    ],\n};\n\nhandleIncrement = habit =>{// habits에서 받은 state를 업데이트 해줘야함 \n  console.log(habit);\n  const habits = this.state.habits.map(item => {//map은 기존의 state habit을 돌면서 아이디가 같다면 새로운 오브젝트를 만들고 카운트를 +1한다\n    if(item.id === habit.id){\n      return{ ...habit, count: habit.count + 1 };\n    }\n    return item;\n  });\n  this.setState({habits});\n};\n\nhandleDecrement = habit =>{\n  const habits = this.state.habits.map(item => {\n    if(item.id === habit.id){\n      const count = habit.count-1;\n      return{ ...habit, count: count < 0 ? 0 : count};\n    }\n    return item;\n  });\n  this.setState({ habits });\n//this state에 있는 habits을 돔\n};\n\nhandleDelete = habit => {\n  const habits = this.state.habits.filter(item => item.id !== habit.id);\n  this.setState({ habits });\n};\n\nhandleAdd = name => {\n  const habits = [...this.state.habits, {id: Date.now(), name, count :0}];\n  this.setState({ habits });\n};\n\nhandleReset = () =>{\n  const habits = this.state.habits.map(habit => {\n    if(habit.count !== 0){\n    return {...habit, count: 0}\n    }\n    return habit;\n  });\n  this.setState({habits});\n};\n\n//render()에서 UI가 정의됨\n  render() {\n    console.log('app');\n    return ( \n      <>\n        <Navbar \n        totalCount={this.state.habits.filter(item => item.count>0).length}//현재진행중인 습관을 배열로 만들어 props로 길이를 전달  \n        />\n      <Habits \n        habits = {this.state.habits}\n        onIncrement={this.handleIncrement} \n        onDecrement={this.handleDecrement}  //Habit 에서 habit을 전달 (props)) Habit컴포넌트를 이용해 표기 \n        onDelete = {this.handleDelete}\n        onAdd={this.handleAdd}\n        onReset = {this.handleReset}\n      />\n      </>  \n    );\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom'; //react-dom라이브러리에서 ReactDOM을 임포트\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport SimpleHabit from './components/simpleHabit';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') // root에 app가 연결됨 \n);"],"sourceRoot":""}